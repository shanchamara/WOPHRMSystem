@model  WOPHRMSystem.Models.LocationModel

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout1.cshtml";
}



<div class="content-wrapper disable-height">
    <!-- Content Header (Page header) -->
    <section class="content-header">
        <div class="container-fluid">
            <div class="row mb-2">
                <div class="col-sm-6">
                    <h1>Add New Location</h1>
                </div>
                <div class="col-sm-6">
                    <ol class="breadcrumb float-sm-right">
                        <li class="breadcrumb-item">Home</li>
                        <li class="breadcrumb-item active"><a href="@Url.Action("Index","Location")">List Of Locations </a></li>
                    </ol>
                </div>
            </div>
        </div><!-- /.container-fluid -->
    </section>

    <!-- Main content -->
    <section class="content">
        <div class="container-fluid">
            <div class="row">

                <!-- /.col -->
            </div>
            <!-- /.row -->
        </div>
        <!-- /.container-fluid -->
    </section>
    <!-- /.content -->
    <section class="content">
        <div class="container-fluid">
            <div class="row">
                <div class="col-12">

                    <!-- /.card -->
                    <div class="card">
                        @*<div class="card-header">
                                <h3 class="card-title"></h3>
                            </div>*@
                        <!-- /.card-header -->
                        <div class="card-body">
                            <div class="card card-info">
                                <div class="card-header">
                                    <h3 class="card-title">Details</h3>
                                </div>

                                @using (Html.BeginForm("", "", FormMethod.Post, new { role = "form", enctype = "multipart/form-data", id = "quickForm", @autocomplete = "off" }))
                                {
                                    @Html.HiddenFor(model => model.Id)
                                    <div class="card-body">

                                        <div class="row">

                                            <div class="col-lg-8">
                                                <div class="mb-3">
                                                    <div class="form-group">
                                                        <label for="exampleInputEmail1">Customer</label>

                                                        @Html.DropDownListFor(model => model.Fk_CustomerId, Model.CustomerLists, "Select", htmlAttributes: new { @class = "form-control", id = "selectCustomer", required = "required" })

                                                    </div>
                                                </div>
                                            </div>

                                        </div>

                                        <div class="row">

                                            <div class="col-lg-4">
                                                <div class="mb-3">
                                                    <div class="form-group">
                                                        <label for="exampleInputEmail1">Code</label>

                                                        @Html.EditorFor(model => model.Code, new { htmlAttributes = new { @class = "form-control", placeholder = "", required = "required", onchange = "TakeCodefunction(this)" } })

                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-lg-8">

                                                <div class="mb-4">
                                                    <div class="form-group">
                                                        <label for="basicpill-address-input">Location</label>
                                                        @Html.EditorFor(model => model.Narration, new { htmlAttributes = new { @class = "form-control", placeholder = "", required = "required", onchange = "TakeNarrationfunction(this)" } })

                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="form-group mb-0">
                                            <div class="custom-control custom-checkbox">
                                                @Html.CheckBoxFor(model => model.IsActive, new { @class = "form-check-input", id = "exampleCheck1" })
                                                <label for="exampleCheck1">Is Active.</label>
                                            </div>
                                        </div>


                                    </div>
                                    <!-- /.card-body -->
                                    <div class="card-footer">
                                        <div class="col-12">

                                            <button type="submit" class="btn btn-primary float-right">Submit</button>

                                        </div>

                                    </div>
                                }

                                <div class="row">
                                    <div class="col-lg-12">

                                        <div id="Viewdata">

                                        </div>

                                    </div>
                                </div>


                            </div>
                        </div>
                        <!-- /.card-body -->
                    </div>

                    <!-- /.card -->
                </div>
                <!-- /.col -->
            </div>
            <!-- /.row -->
        </div>
        <!-- /.container-fluid -->
    </section>
</div>

@section scripts {
    <script src="~/plugins/jquery/jquery.min.js"></script>
    <!-- Bootstrap 4 -->
    <script src="~/plugins/bootstrap/js/bootstrap.bundle.min.js"></script>
    <!-- jquery-validation -->
    <script src="~/plugins/jquery-validation/jquery.validate.min.js"></script>
    <script src="~/plugins/jquery-validation/additional-methods.min.js"></script>
    <!-- AdminLTE App -->
    <script src="~/dist/js/adminlte.min.js"></script>
    <!-- AdminLTE for demo purposes -->
    <script src="~/dist/js/demo.js"></script>

    <script>




        $(function () {
            $.validator.setDefaults({
                submitHandler: function () {
                    //alert("Form successful submitted!");
                    var data = $('#quickForm').serialize();
                    debugger;

                    var TakeCode = document.getElementById("Code").value;
                    var TakeNarration = document.getElementById("Narration").value;
                    var List = JSON.parse(localStorage.getItem('CustomerLocationList')) || [];

                    if (TakeCode != '' && TakeNarration != '') {
                        let hasWarning = false;

                        const hasEmployeesRecord = List.some(record => record.Code === TakeCode && record.Narration === TakeNarration);
                        debugger;
                        if (hasEmployeesRecord === false) {
                            Swal.fire({
                                title: 'Warning!',
                                text: 'please add the date range and rate in the new record.',
                                icon: 'warning',
                                confirmButtonText: 'OK'
                            });
                            hasWarning = true;
                        }

                        if (hasWarning) {
                            return; // Exit function or prevent further execution
                        }
                    }
                    PostCustomerInsert(data);
                }
            });
            $('#quickForm').validate({
                rules: {
                    Code: {
                        required: true,

                    },
                    Narration: {
                        required: true,

                    },
                    IsActive: {
                        required: false
                    },
                    Fk_CustomerId: {
                        required: true
                    },
                    Rate: {
                        required: false
                    },
                },
                messages: {
                    Code: {
                        required: "Please enter a code",
                    },
                    Narration: {
                        required: "Please provide a Location Name",
                    },
                    terms: "Please Select the Status",
                    Fk_CustomerId: {
                        required: "Please Select the Customer",
                    },
                    Rate: {
                        required: "Please Provide a Rate",
                    },
                },
                errorElement: 'span',
                errorPlacement: function (error, element) {
                    error.addClass('invalid-feedback');
                    element.closest('.form-group').append(error);
                },
                highlight: function (element, errorClass, validClass) {
                    $(element).addClass('is-invalid');
                },
                unhighlight: function (element, errorClass, validClass) {
                    $(element).removeClass('is-invalid');
                }
            });
        });

        window.addEventListener('load', function () {
            localStorage.clear();
            var Customerid = parseFloat($('#selectCustomer').val()) || 0;
            // Get the selected value
            GetSelectedCustomerHasLocationForEdit(Customerid);

            
        });

        var PostCustomerInsert = function (model) {

            var masterModel = {
                Narration: $("#Narration").val(),
                Code: $("#Code").val(),
                Fk_CustomerId: document.getElementById("selectCustomer").value,
                IsActive: document.getElementById("exampleCheck1").checked,
            };
            var rates = JSON.parse(localStorage.getItem('CustomerLocationList')) || [];

            var dataToSend = {
                masterModel: masterModel,
                rates: rates
            };
            $.ajax({
                type: "POST",
                url: "/Location/Edit",
                data: JSON.stringify(dataToSend),
                contentType: "application/json",
                success: function (result) {
                    Swal.fire({
                        icon: result.Status,
                        title: result.Status,
                        text: result.Text
                    }).then((swalResult) => {
                        if (swalResult.isConfirmed) {
                             window.location.href = "@Url.Action("Index", "Location")"
                        } else {
                            window.location.href = "@Url.Action("Index", "Location")"
                        }
                    });
                },
                error: function (xhr, status, error) {
                    console.error("Error: " + error);
                    console.error("Status: " + status);
                    console.error(xhr.responseText);
                    Swal.fire({
                        icon: "error",
                        title: "Error",
                        text: "Something went wrong. Please try again later.",
                    });
                }
            });


        }





        var GetSelectedCustomerHasLocationForEdit = function (id) {

            $.ajax({
                type: "GET",
                url: "/Location/DisplayCustomerHasLocationForEdit",
                data: { id: id },

                success: function (result) {
                    debugger
                    $("#Viewdata").html(result);


                },
            })
        }

        function TakeCodefunction(element) {
            var TakeNarration = document.getElementById("Narration").value;

            if (TakeNarration == "") {
                document.getElementById("Narration").className = "form-control text-box single-line is-invalid";
            } else {
                debugger
                var code = element.value; // Get the current value of the input
                var dropdown = document.getElementById("LocationList");

                if (dropdown != null) {
                    // First, remove any existing option that matches the current code
                    for (var i = 0; i < dropdown.options.length; i++) {
                        if (dropdown.options[i].value.startsWith(code + ' ')) {
                            dropdown.remove(i);
                            break;
                        }
                    }

                    // Create a new option element
                    var option = document.createElement("option");

                    // Set the value and text content of the option
                    option.value = code + ' ' + TakeNarration;
                    option.text = code + ' ' + TakeNarration;

                    // Append the option to the dropdown
                    dropdown.appendChild(option);
                }
            }
            // Perform your custom logic here
        }

        // Add an event listener to the Narration input to update the dropdown when the value changes
        document.getElementById("Narration").addEventListener("input", function () {
            // Assuming the element is passed from the event listener
            var element = document.getElementById("CodeElement"); // Replace with the correct ID or reference to the code input element
            TakeCodefunction(element);
        });

        function TakeNarrationfunction(element) {
            var TakeCode = document.getElementById("Code").value;

            if (TakeCode === "") {
                document.getElementById("Code").className = "form-control text-box single-line is-invalid";
            } else {
                var value = element.value; // Get the current value of the input
                var dropdown = document.getElementById("LocationList");

                if (dropdown != null && value !== "") {
                    // Construct the new value to be added
                    var newValue = TakeCode + ' ' + value;

                    // Check if the dropdown already contains the value
                    var exists = false;
                    for (var i = 0; i < dropdown.options.length; i++) {
                        if (dropdown.options[i].value.startsWith(TakeCode + ' ')) {
                            exists = true;
                            // Update the existing option if found
                            dropdown.options[i].value = newValue;
                            dropdown.options[i].text = newValue;
                            break;
                        }
                    }

                    // If the value doesn't exist, add the new option
                    if (!exists) {
                        // Create a new option element
                        var option = document.createElement("option");

                        // Set the value and text content of the option
                        option.value = newValue;
                        option.text = newValue;

                        // Append the option to the dropdown
                        dropdown.appendChild(option);
                    }
                }
            }
            // Perform your custom logic here
        }

        
    </script>
}

