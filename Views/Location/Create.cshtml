@model  WOPHRMSystem.Models.LocationModel

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout1.cshtml";
}
<!-- daterange picker -->
<link rel="stylesheet" href="~/plugins/daterangepicker/daterangepicker.css">
<!-- iCheck for checkboxes and radio inputs -->
<link rel="stylesheet" href="~/plugins/icheck-bootstrap/icheck-bootstrap.min.css">
<!-- Bootstrap Color Picker -->
<link rel="stylesheet" href="~/plugins/bootstrap-colorpicker/css/bootstrap-colorpicker.min.css">
<!-- Tempusdominus Bootstrap 4 -->
<link rel="stylesheet" href="~/plugins/tempusdominus-bootstrap-4/css/tempusdominus-bootstrap-4.min.css">
<!-- Select2 -->
<link rel="stylesheet" href="~/plugins/select2/css/select2.min.css">
<link rel="stylesheet" href="~/plugins/select2-bootstrap4-theme/select2-bootstrap4.min.css">
<!-- Bootstrap4 Duallistbox -->
<link rel="stylesheet" href="~/plugins/bootstrap4-duallistbox/bootstrap-duallistbox.min.css">
<!-- BS Stepper -->
<link rel="stylesheet" href="~/plugins/bs-stepper/css/bs-stepper.min.css">
<!-- dropzonejs -->
<link rel="stylesheet" href="~/plugins/dropzone/min/dropzone.min.css">


<div class="content-wrapper disable-height">
    <!-- Content Header (Page header) -->
    <section class="content-header">
        <div class="container-fluid">
            <div class="row mb-2">
                <div class="col-sm-6">
                    <h1>Add New Location</h1>
                </div>
                <div class="col-sm-6">
                    <ol class="breadcrumb float-sm-right">
                        <li class="breadcrumb-item">Home</li>
                        <li class="breadcrumb-item active"><a href="@Url.Action("Index","Location")">List Of Locations </a></li>
                    </ol>
                </div>
            </div>
        </div><!-- /.container-fluid -->
    </section>

    <!-- Main content -->
    <section class="content">
        <div class="container-fluid">
            <div class="row">

                <!-- /.col -->
            </div>
            <!-- /.row -->
        </div>
        <!-- /.container-fluid -->
    </section>
    <!-- /.content -->
    <section class="content">
        <div class="container-fluid">
            <div class="row">
                <div class="col-12">

                    <!-- /.card -->
                    <div class="card">
                        @*<div class="card-header">
                                <h3 class="card-title"></h3>
                            </div>*@
                        <!-- /.card-header -->
                        <div class="card-body">
                            <div class="card card-info">
                                <div class="card-header">
                                    <h3 class="card-title">Details</h3>
                                </div>

                                @using (Html.BeginForm("", "", FormMethod.Post, new { role = "form", enctype = "multipart/form-data", id = "quickForm", @autocomplete = "off" }))
                                {

                                    <div class="card-body">

                                        <div class="row">

                                            <div class="col-lg-8">
                                                <div class="mb-3">
                                                    <div class="form-group">
                                                        <label for="exampleInputEmail1">Customer</label>

                                                        @Html.DropDownListFor(model => model.Fk_CustomerId, Model.CustomerLists, "Select", htmlAttributes: new { @class = "form-control", id = "selectCustomer", required = "required" })

                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-lg-4">

                                                <div class="mb-4">
                                                    <div class="form-group">
                                                        <label for="basicpill-address-input">Rate</label>
                                                        @Html.EditorFor(model => model.Rate, new { htmlAttributes = new { @class = "form-control", placeholder = "", required = "required", @type = "number", @min = "0" } })

                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="row">

                                            <div class="col-lg-4">
                                                <div class="mb-3">
                                                    <div class="form-group">
                                                        <label for="exampleInputEmail1">Code</label>

                                                        @Html.EditorFor(model => model.Code, new { htmlAttributes = new { @class = "form-control", placeholder = "", required = "required" } })

                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-lg-8">

                                                <div class="mb-4">
                                                    <div class="form-group">
                                                        <label for="basicpill-address-input">Location</label>
                                                        @Html.EditorFor(model => model.Narration, new { htmlAttributes = new { @class = "form-control", placeholder = "", required = "required" } })

                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">

                                            <div class="col-lg-6">
                                                <div class="mb-3">
                                                    <div class="form-group">
                                                        <label for="exampleInputEmail1">From Date</label>
                                                        <div class="input-group date" id="reservationdate" data-target-input="nearest">
                                                            @Html.EditorFor(model => model.FromDate, new { htmlAttributes = new { @class = "form-control datetimepicker-input", data_target = "#reservationdate" } })

                                                            @*<input type="text" name="Date" class="form-control datetimepicker-input" data-target="#reservationdate" />*@
                                                            <div class="input-group-append" data-target="#reservationdate" data-toggle="datetimepicker">
                                                                <div class="input-group-text"><i class="fa fa-calendar"></i></div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-lg-6">

                                                <div class="mb-4">
                                                    <div class="form-group">
                                                        <label for="exampleInputEmail1">To Date</label>
                                                        <div class="input-group date" id="reservationdate1" data-target-input="nearest">
                                                            @Html.EditorFor(model => model.ToDate, new { htmlAttributes = new { @class = "form-control datetimepicker-input", data_target = "#reservationdate1" } })

                                                            @*<input type="text" name="Date" class="form-control datetimepicker-input" data-target="#reservationdate" />*@
                                                            <div class="input-group-append" data-target="#reservationdate1" data-toggle="datetimepicker">
                                                                <div class="input-group-text"><i class="fa fa-calendar"></i></div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="form-group mb-0">
                                            <div class="custom-control custom-checkbox">
                                                @Html.CheckBoxFor(model => model.IsActive, new { @class = "form-check-input", id = "exampleCheck1" })
                                                <label for="exampleCheck1">Is Active.</label>
                                            </div>
                                        </div>

                                        <div class="row">
                                            <div class="col-lg-12">

                                                <div id="Viewdata">

                                                </div>

                                            </div>
                                        </div>
                                    </div>
                                    <!-- /.card-body -->
                                    <div class="card-footer">
                                        <div class="col-12">

                                            <button type="submit" class="btn btn-primary float-right">Submit</button>

                                        </div>

                                    </div>
                                }


                            </div>
                        </div>
                        <!-- /.card-body -->
                    </div>

                    <!-- /.card -->
                </div>
                <!-- /.col -->
            </div>
            <!-- /.row -->
        </div>
        <!-- /.container-fluid -->
    </section>
</div>

@section scripts {
    <!-- jQuery -->
    <script src="~/plugins/jquery/jquery.min.js"></script>
    <!-- Bootstrap 4 -->
    <script src="~/plugins/bootstrap/js/bootstrap.bundle.min.js"></script>
    <!-- Select2 -->
    <script src="~/plugins/select2/js/select2.full.min.js"></script>
    <!-- Bootstrap4 Duallistbox -->
    <script src="~/plugins/bootstrap4-duallistbox/jquery.bootstrap-duallistbox.min.js"></script>
    <!-- InputMask -->
    <script src="~/plugins/moment/moment.min.js"></script>
    <script src="~/plugins/inputmask/jquery.inputmask.min.js"></script>
    <!-- date-range-picker -->
    <script src="~/plugins/daterangepicker/daterangepicker.js"></script>
    <!-- jquery-validation -->
    <script src="~/plugins/jquery-validation/jquery.validate.min.js"></script>
    <script src="~/plugins/jquery-validation/additional-methods.min.js"></script>
    <!-- bootstrap color picker -->
    <script src="~/plugins/bootstrap-colorpicker/js/bootstrap-colorpicker.min.js"></script>
    <!-- Tempusdominus Bootstrap 4 -->
    <script src="~/plugins/tempusdominus-bootstrap-4/js/tempusdominus-bootstrap-4.min.js"></script>
    <!-- Bootstrap Switch -->
    <script src="~/plugins/bootstrap-switch/js/bootstrap-switch.min.js"></script>
    <!-- BS-Stepper -->
    <script src="~/plugins/bs-stepper/js/bs-stepper.min.js"></script>
    <!-- dropzonejs -->
    <script src="~/plugins/dropzone/min/dropzone.min.js"></script>
    <!-- AdminLTE App -->
    <script src="~/dist/js/adminlte.min.js"></script>
    <!-- AdminLTE for demo purposes -->
    <script src="~/dist/js/demo.js"></script>

    <script>


        $(function () {
            //Initialize Select2 Elements

            $('.select2').select2()
            //Date picker
            // Initialize the Date Pickers
            $('#reservationdate1').datetimepicker({
                format: 'L',
                minDate: moment(),
                useCurrent: false// Disable past dates for From Date
            });

            $('#reservationdate').datetimepicker({
                format: 'L', maxDate: moment(),
                useCurrent: false // Important! Prevents from using the current date when setting the "To Date" initially
            });

            //// When From Date is selected
            //$('#reservationdate').on('change.datetimepicker', function (e) {
            //    var selectedDate = e.date; // Get the selected date

            //    // Set the To Date picker to one day after the From Date
            //    $('#reservationdate1').datetimepicker('minDate', selectedDate.add(1, 'days'));

            //    // Optionally, you can set a default To Date here
            //    $('#reservationdate1').datetimepicker('date', selectedDate.add(1, 'days'));
            //});

            //Date and time picker
            $('#reservationdatetime').datetimepicker({ icons: { time: 'far fa-clock' } });

            //Date range picker
            $('#reservation').daterangepicker()
            //Date range picker with time picker
            $('#reservationtime').daterangepicker({
                timePicker: true,
                timePickerIncrement: 30,
                locale: {
                    format: 'MM/DD/YYYY hh:mm A'
                }
            })
            //Date range as a button
            $('#daterange-btn').daterangepicker(
                {
                    ranges: {
                        'Today': [moment(), moment()],
                        'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                        'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                        'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                        'This Month': [moment().startOf('month'), moment().endOf('month')],
                        'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
                    },
                    startDate: moment().subtract(29, 'days'),
                    endDate: moment()
                },
                function (start, end) {
                    $('#reportrange span').html(start.format('MMMM D, YYYY') + ' - ' + end.format('MMMM D, YYYY'))
                }
            )



        })


    $(function () {
        $.validator.setDefaults({
            submitHandler: function () {
                //alert("Form successful submitted!");
                var data = $('#quickForm').serialize();
                debugger;

                PostCustomerInsert(data);
            }
        });
        $('#quickForm').validate({
            rules: {
                Code: {
                    required: true,

                },
                Narration: {
                    required: true,

                },
                IsActive: {
                    required: false
                },
                Fk_CustomerId: {
                    required: true
                },
                Rate: {
                    required: true
                },
            },
            messages: {
                Code: {
                    required: "Please enter a code",
                },
                Narration: {
                    required: "Please provide a Location Name",
                },
                terms: "Please Select the Status",
                Fk_CustomerId: {
                    required: "Please Select the Customer",
                },
                Rate: {
                    required: "Please Provide a Rate",
                },
            },
            errorElement: 'span',
            errorPlacement: function (error, element) {
                error.addClass('invalid-feedback');
                element.closest('.form-group').append(error);
            },
            highlight: function (element, errorClass, validClass) {
                $(element).addClass('is-invalid');
            },
            unhighlight: function (element, errorClass, validClass) {
                $(element).removeClass('is-invalid');
            }
        });
    });


    var PostCustomerInsert = function (model) {

        $.ajax({
            type: "Post",
            url: "/Location/Create",
            data: model,

            success: function (result) {
                Swal.fire({

                    icon: result.Status,
                    title: result.Status,
                    text: result.Text
                }).then((result) => {
                    if (result.isConfirmed) {
                        window.location.href = "@Url.Action("Index", "Location")"
                    }
                    else {
                        window.location.href = "@Url.Action("Index", "Location")"
                    }
                })
            },
        })

        }


        function getSelectedValue1() {
            // Get the dropdown element by its ID
            var selectElement = document.getElementById("selectCustomer");
            debugger
            // Get the selected value
            var selectedValue = selectElement.value;

            GetSelectedCustomerHasLocation(selectedValue);
            // You can return the value if needed
            return selectedValue;
        }

        document.getElementById("selectCustomer").addEventListener("change", function () {
            var selectedValue = getSelectedValue1();
            // alert("The selected value is: " + selectedValue);
        });


        var GetSelectedCustomerHasLocation = function (id) {

            $.ajax({
                type: "GET",
                url: "/Location/DisplayCustomerHasLocation",
                data: { id: id },

                success: function (result) {

                    $("#Viewdata").html(result);
                },
            })
        }

    </script>
}

