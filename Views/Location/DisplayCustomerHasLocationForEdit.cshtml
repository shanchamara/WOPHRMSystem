
@model WOPHRMSystem.Models.ListLocationDetails


<!-- DataTables -->
<link rel="stylesheet" href="~/plugins/datatables-bs4/css/dataTables.bootstrap4.min.css">
<link rel="stylesheet" href="~/plugins/datatables-responsive/css/responsive.bootstrap4.min.css">
<link rel="stylesheet" href="~/plugins/datatables-buttons/css/buttons.bootstrap4.min.css">
<!-- daterange picker -->
<link rel="stylesheet" href="~/plugins/daterangepicker/daterangepicker.css">
<!-- iCheck for checkboxes and radio inputs -->
<link rel="stylesheet" href="~/plugins/icheck-bootstrap/icheck-bootstrap.min.css">
<!-- Bootstrap Color Picker -->
<link rel="stylesheet" href="~/plugins/bootstrap-colorpicker/css/bootstrap-colorpicker.min.css">
<!-- Tempusdominus Bootstrap 4 -->
<link rel="stylesheet" href="~/plugins/tempusdominus-bootstrap-4/css/tempusdominus-bootstrap-4.min.css">
<!-- Select2 -->
<link rel="stylesheet" href="~/plugins/select2/css/select2.min.css">
<link rel="stylesheet" href="~/plugins/select2-bootstrap4-theme/select2-bootstrap4.min.css">
<!-- Bootstrap4 Duallistbox -->
<link rel="stylesheet" href="~/plugins/bootstrap4-duallistbox/bootstrap-duallistbox.min.css">
<!-- BS Stepper -->
<link rel="stylesheet" href="~/plugins/bs-stepper/css/bs-stepper.min.css">
<!-- dropzonejs -->
<link rel="stylesheet" href="~/plugins/dropzone/min/dropzone.min.css">
<style>
    .disable-height {
        height: auto !important;
    }

    .list-group {
        max-height: 400px;
        margin-bottom: 10px;
        overflow-x: hidden;
        -webkit-overflow-scrolling: touch;
    }
</style>
@{
    int Rows = 1;
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">

            <!-- /.card -->
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">Customer Has Location's </h3>
                </div>
                <!-- /.card-header -->
                <div class="list-group">
                    <table id="example1" class="table table-bordered table-striped">
                        <thead>
                            <tr>
                                <th style="display:none;">Id</th> <!-- Hidden Id column -->
                                <th>Code</th>
                                <th>CustomerName</th>
                                <th>Location Name</th>
                                <th>From Date</th>
                                <th>To Date</th>
                                <th>Rate</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody id="ratesBody">
                            @foreach (var s in Model.LocationModels)
                            {
                                <tr>
                                    <td style="display:none;">@s.Id</td> <!-- Hidden Id column -->
                                    <td>@s.Code</td>
                                    <td>@s.CustomerName</td>
                                    <td>@s.Narration</td>
                                    <td>@s.FromDate.Value.ToShortDateString()</td>
                                    <td>@s.ToDate.Value.ToShortDateString()</td>
                                    <td>@s.Rate</td>



                                </tr>
                                Rows++;
                            }
                            @using (Html.BeginForm("", "", FormMethod.Post, new { role = "form", enctype = "multipart/form-data", id = "quickForm1", @autocomplete = "off" }))
                            {
                                @Html.HiddenFor(model => model.Id)
                                <tr>
                                    <td style="display:none;"></td> <!-- Hidden Id column -->
                                    <td colspan="2">
                                        <label for="exampleInputEmail1">Location Name</label>
                                        @Html.DropDownListFor(model => model.CodeAndNarration, new SelectList(new List<Object>
                                        {

                                        new { value = "" , text = "Select "  }

                                        }, "value", "text", "Select "), htmlAttributes: new { @class = "form-control form-control-sm", id = "LocationList" })

                                    </td>

                                    <td colspan="1">
                                        <label for="exampleInputEmail1">From Date</label>
                                        @Html.EditorFor(model => model.FromDate, new { htmlAttributes = new { @class = "form-control form-control-sm", id = "FromDate", onchange = "handleDateChangelocation()" } })
                                    </td>
                                    <td colspan="1">
                                        <label for="exampleInputEmail1">To Date</label>
                                        @Html.EditorFor(model => model.ToDate, new { htmlAttributes = new { @class = "form-control form-control-sm", id = "ToDate", onchange = "handleDateChangelocation()" } })
                                    </td>
                                    <td colspan="2">
                                        <label for="exampleInputEmail1">Rate</label>
                                        @Html.EditorFor(model => model.Rate, new { htmlAttributes = new { @class = "form-control form-control-sm", placeholder = "", @type = "number", @min = "0", onchange = "handleDateChangelocation()" } })
                                    </td>


                                    <td class="project-actions text-right">
                                        <button style="margin:15px" class="btn btn-info btn-sm" type="button" onclick="SubmitStepTemperley()">
                                            <i class="fas fa-plus"></i>
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <!-- /.card-body -->
            </div>
            <!-- /.card -->
        </div>
        <!-- /.col -->
    </div>
    <!-- /.row -->
</div>

<!-- Ensure jQuery and jQuery Validation scripts are loaded -->
<script src="~/plugins/jquery/jquery.min.js"></script>
<script src="~/plugins/jquery-validation/jquery.validate.min.js"></script>
<script src="~/plugins/jquery-validation/additional-methods.min.js"></script>
<script>



     var Code = JSON.parse(localStorage.getItem('CustomerLocationList')) || [];
     var ForDropdown = JSON.parse(localStorage.getItem('CustomerLocationListForDropdown')) || [];
     var json = @Html.Raw(Json.Encode(@Model.LocationModels));
     Code = [...Code, ...json];
     localStorage.setItem('CustomerLocationList', JSON.stringify(Code));
     localStorage.setItem('CustomerLocationListForDropdown', JSON.stringify(Code));

    debugger

    var listdata = JSON.parse(localStorage.getItem('CustomerLocationListForDropdown')) || [];
    var dropdown = $('#LocationList');
    dropdown.empty();
    dropdown.append('<option value="">Select</option>');
    $.each(listdata, function (index, item) {
        dropdown.append('<option value="' + item.Code + ' ' + item.Narration + '">' + item.Code +' '+item.Narration + '</option>');
    });

   

    
    function handleDateChangelocation() {
        // Your logic here
        debugger
        var ToDate = document.getElementById("ToDate").value;
        var fromDate = document.getElementById("FromDate").value;
        var Rate = document.getElementById("Rate").value;
        var Fk_DesginationId = $('#LocationList').val();



        if (fromDate != "") {
            document.getElementById("FromDate").className = "form-control text-box single-line";


        }
        if (ToDate != "") {

            document.getElementById("ToDate").className = "form-control text-box single-line";


        }
        if (Fk_DesginationId != "") {
            var dropdown = document.getElementById("LocationList");
            setTimeout(function () {
                dropdown.classlist.remove("is-invalid");
            }, 10);

        }
        if (Rate != "") {
            document.getElementById("Rate").className = "form-control text-box single-line";


        }

    }

    var IsValid = true;

    function SubmitStepTemperley() {

        debugger
        var ToDate = document.getElementById("ToDate").value;
        var fromDate = document.getElementById("FromDate").value;
        var Rate = document.getElementById("Rate").value;
        var locationName = $('#LocationList').val();


        if (locationName == "") {
            IsValid = false;
            // $('#selectDesgination').className = "form-control text-box single-line is-invalid";
            var dropdown = document.getElementById("LocationList");
            setTimeout(function () {
                dropdown.classList.add("is-invalid");
            }, 10);
            return IsValid;
        }
        if (fromDate == "") {
            IsValid = false;
            document.getElementById("FromDate").className = "form-control text-box single-line is-invalid";

            return IsValid;
        }
        if (ToDate == "") {
            IsValid = false;
            document.getElementById("ToDate").className = "form-control text-box single-line is-invalid";

            return IsValid;
        }



        if (Rate == "") {
            IsValid = false;
            document.getElementById("Rate").className = "form-control text-box single-line is-invalid";

            return IsValid;
        }


        debugger
        var selectElement = document.getElementById("selectCustomer");
        var selectedText = selectElement.options[selectElement.selectedIndex].text;


        var NarrationValue = document.getElementById("Narration").value;
        var CodeValue = document.getElementById("Code").value;

        // Convert the date string to a Date object
        const todate = new Date(ToDate);
        const formdate = new Date(fromDate);

        // Get the timestamp in milliseconds
        const todatetimestamp = todate.getTime();
        const fromdatetimestamp = formdate.getTime();

        var rates = JSON.parse(localStorage.getItem('CustomerLocationList')) || [];
        var randomId = Math.floor(Math.random() * 10000) + 1;
        //rates.push({ toDate: ToDate, fromDate: fromDate, rate: Rate, LocationName: locationName });
        var rateObject = {
            Code: CodeValue,
            CodeAndNarration: locationName,
            CustomerLists: null,
            CustomerName: selectedText,
            Fk_CustomerId: 6,
            FromDate: fromdatetimestamp,
            Id: randomId,
            IsActive: true,
            IsDelete: true,
            Narration: NarrationValue,
            Rate: Rate,
            ToDate: todatetimestamp
        };

        rates.push(rateObject);

        localStorage.setItem('CustomerLocationList', JSON.stringify(rates));
        displayRates();

        var listdata = JSON.parse(localStorage.getItem('CustomerLocationListForDropdown')) || [];
        var dropdown = $('#LocationList');
        var addedValues = new Set();

        dropdown.empty();
        dropdown.append('<option value="">Select</option>');

        $.each(listdata, function (index, item) {
            var value = item.Code + ' ' + item.Narration;

            if (!addedValues.has(value)) {
                dropdown.append('<option value="' + value + '">' + value + '</option>');
                addedValues.add(value);
            }
        });



        var TakeCode = document.getElementById("Code").value;
        var value = document.getElementById("Narration").value;

        var dropdown = document.getElementById("LocationList");

        // Create a new option element
        var option = document.createElement("option");

        // Set the value and text content of the option
        option.value = TakeCode + ' ' + value;
        option.text = TakeCode + ' ' + value;
        dropdown.appendChild(option);
    }

    // Function to convert the .NET JSON date format to MM/DD/YYYY
    function formatDate(dateInput) {
        if (!dateInput) return ''; // Handle null or undefined inputs

        let timestamp;

        // Check if dateInput is a string in "/Date(...)/" format
        if (typeof dateInput === 'string' && dateInput.includes('/Date')) {
            timestamp = parseInt(dateInput.replace("/Date(", "").replace(")/", ""), 10);
        }
        // Check if dateInput is already a Date object
        else if (dateInput instanceof Date) {
            timestamp = dateInput.getTime();
        }
        // Handle the case if it's already a timestamp number
        else if (typeof dateInput === 'number') {
            timestamp = dateInput;
        } else {
            // Invalid format, return an empty string
            return '';
        }

        const date = new Date(timestamp);

        const month = ('0' + (date.getMonth() + 1)).slice(-2); // Months are zero-based
        const day = ('0' + date.getDate()).slice(-2);
        const year = date.getFullYear();

        return `${month}/${day}/${year}`;
    }

     function displayRates() {
         var rates = JSON.parse(localStorage.getItem('CustomerLocationList')) || [];
         var ratesBody = document.getElementById('ratesBody');
         ratesBody.innerHTML = ''; // Clear previous rows

     rates.forEach(function (rate, index) {
         var row = `<tr>
                <td style="display:none;">${rate.Id}</td> <!-- Hidden Id column -->
                <td>${rate.Code}</td>
                <td>${rate.CustomerName}</td>
                <td>${rate.Narration}</td>
                <td>${formatDate(rate.FromDate)}</td>
                <td>${formatDate(rate.ToDate)}</td>
                <td>${rate.Rate}</td>



                  ${rate.IsDelete ? `
                    <td class="project-actions text-right">
                        <a class="btn btn-danger btn-sm" onclick="deleteRate(${index})">
                            <i class="fas fa-trash"></i> Remove
                        </a>
                    </td>` : ''}
             </tr>


             `;
         ratesBody.innerHTML += row;
     });

     var row1 = `
        @using (Html.BeginForm("", "", FormMethod.Post, new { role = "form", enctype = "multipart/form-data", id = "quickForm1", @autocomplete = "off" }))
   {
       @Html.HiddenFor(model => model.Id)
       <tr>
           <td style="display:none;"></td> <!-- Hidden Id column -->
           <td colspan="2">
               <label for="exampleInputEmail1">Location Name</label>
               @Html.DropDownListFor(model => model.CodeAndNarration, new SelectList(new List<Object>
               {

               new { value = "" , text = "Select "  }

               }, "value", "text", "Select "), htmlAttributes: new { @class = "form-control form-control-sm", id = "LocationList" })

           </td>

           <td colspan="1">
               <label for="exampleInputEmail1">From Date</label>
               @Html.EditorFor(model => model.FromDate, new { htmlAttributes = new { @class = "form-control form-control-sm", id = "FromDate",  onchange = "handleDateChangelocation()" } })
           </td>
           <td colspan="1">
               <label for="exampleInputEmail1">To Date</label>
               @Html.EditorFor(model => model.ToDate, new { htmlAttributes = new { @class = "form-control form-control-sm", id = "ToDate",  onchange = "handleDateChangelocation()" } })
           </td>
           <td colspan="2">
               <label for="exampleInputEmail1">Rate</label>
               @Html.EditorFor(model => model.Rate, new { htmlAttributes = new { @class = "form-control form-control-sm", placeholder = "",  @type = "number", @min = "0", onchange = "handleDateChangelocation()" } })
           </td>


           <td class="project-actions text-right">
               <button style="margin:15px" class="btn btn-info btn-sm" type="button" onclick="SubmitStepTemperley()">
                   <i class="fas fa-plus"></i>
               </button>
           </td>
       </tr>
   }
 `;
         ratesBody.innerHTML += row1;


    }


    function deleteRate(index) {
        var rates = JSON.parse(localStorage.getItem('CustomerLocationList')) || [];
        var listdata = JSON.parse(localStorage.getItem('CustomerLocationListForDropdown')) || [];
        rates.splice(index, 1);
        localStorage.setItem('CustomerLocationList', JSON.stringify(rates));
        displayRates();


        var dropdown = $('#LocationList');
        var addedValues = new Set();

        dropdown.empty();
        dropdown.append('<option value="">Select</option>');

        $.each(listdata, function (index, item) {
            var value = item.Code + ' ' + item.Narration;

            if (!addedValues.has(value)) {
                dropdown.append('<option value="' + value + '">' + value + '</option>');
                addedValues.add(value);
            }
        });



        var TakeCode = document.getElementById("Code").value;
        var value = document.getElementById("Narration").value;

        var dropdown = document.getElementById("LocationList");

        // Create a new option element
        var option = document.createElement("option");

        // Set the value and text content of the option
        option.value = TakeCode + ' ' + value;
        option.text = TakeCode + ' ' + value;
        dropdown.appendChild(option);
    }


</script>