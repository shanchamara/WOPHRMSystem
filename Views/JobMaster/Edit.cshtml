@model  WOPHRMSystem.Models.JobMasterModel

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout1.cshtml";
}
<style>
    .card-body1 {
        height: 300px; /* Set your desired default height */
        overflow-y: auto; /* Add a scrollbar if content exceeds the height */
    }

    .body1 {
        height: 900px;
    }
</style>

<div class="content-wrapper disable-height">
    <!-- Content Header (Page header) -->
    <section class="content-header">
        <div class="container-fluid">
            <div class="row mb-2">
                <div class="col-sm-6">
                    <h1>Update Job Master</h1>
                </div>
                <div class="col-sm-6">
                    <ol class="breadcrumb float-sm-right">
                        <li class="breadcrumb-item">Home</li>
                        <li class="breadcrumb-item active"><a href="@Url.Action("Index","JobMaster")">List Of Job Masters </a></li>
                    </ol>
                </div>
            </div>
        </div><!-- /.container-fluid -->
    </section>

    <!-- Main content -->
    <section class="content">
        <div class="container-fluid">
            <div class="row">

                <!-- /.col -->
            </div>
            <!-- /.row -->
        </div>
        <!-- /.container-fluid -->
    </section>
    <!-- /.content -->
    <section class="content">
        <div class="container-fluid">
            <div class="row">
                <div class="col-12 body1">





                    <div class="row">
                        <div class="col-md-6">
                            @using (Html.BeginForm("", "", FormMethod.Post, new { role = "form", enctype = "multipart/form-data", id = "quickForm", @autocomplete = "off" }))
                            {
                                @Html.HiddenFor(model => model.DefaultJobCode)
                                @Html.HiddenFor(model => model.Id)
                                @Html.HiddenFor(model => model.Fk_CustomerId)
                                @Html.HiddenFor(model => model.PartnerId)
                                @Html.HiddenFor(model => model.ManagerId)

                                <div class="card card-danger">
                                    <div class="card-header">
                                        <h3 class="card-title">Job Details</h3>
                                    </div>
                                    <div class="card-body">
                                        <!-- Date dd/mm/yyyy -->

                                        <div class="row">
                                            <div class="col-lg-6">
                                                <div class="mb-2">
                                                    <!-- Adjusted margin bottom here -->
                                                    <div class="form-group">
                                                        <label for="exampleInputEmail1" class="form-control-sm">Partner</label>
                                                        @Html.DropDownListFor(model => model.PartnerId, Model.PartnerSelectListItems, "Select", htmlAttributes: new { @class = "form-control form-control-sm", id = "selectPartner", required = "required", @disabled = "disabled" })
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-lg-3">
                                                <div class="mb-2">
                                                    <!-- Adjusted margin bottom here -->
                                                    <div class="form-group">
                                                        <label for="basicpill-address-input" class="form-control-sm">Job Prefix Code</label>
                                                        @Html.EditorFor(model => model.JObPrefixCode, new { htmlAttributes = new { @class = "form-control form-control-sm", placeholder = "", @ReadOnly = "ReadOnly" } })
                                                        @Html.ValidationSummary(false, "", new { @class = "error invalid-feedback", id = "errorDescription" })
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-lg-3">
                                                <div class="mb-2">
                                                    <!-- Adjusted margin bottom here -->
                                                    <div class="form-group">
                                                        <label for="exampleInputEmail1" class="form-control-sm">Job Code</label>
                                                        @Html.EditorFor(model => model.JobCode, new { htmlAttributes = new { @class = "form-control form-control-sm", placeholder = "", @ReadOnly = "ReadOnly" } })
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="row">
                                            <div class="col-lg-12">
                                                <div class="mb-2">
                                                    <!-- Adjusted margin bottom here -->
                                                    <div class="form-group">
                                                        <label for="basicpill-address-input" class="form-control-sm">Description</label>
                                                        @Html.EditorFor(model => model.Narration, new { htmlAttributes = new { @class = "form-control form-control-sm", placeholder = "" } })
                                                        @Html.ValidationSummary(false, "", new { @class = "error invalid-feedback", id = "errorDescription" })
                                                    </div>
                                                </div>
                                            </div>
                                        </div>


                                        <div class="row">
                                            <div class="col-lg-6">
                                                <div class="mb-2">
                                                    <!-- Adjusted margin bottom here -->
                                                    <div class="form-group">
                                                        <label for="exampleInputEmail1" class="form-control-sm">Customer Name </label>
                                                        @Html.DropDownListFor(model => model.Fk_CustomerId, Model.CustomerSelectListItems, "Select", htmlAttributes: new { @class = "form-control form-control-sm", id = "selectUnit", @disabled = "disabled" })
                                                        @* @Html.ValidationSummary(false, "", new { @class = "text-danger form-control-sm", id = "errorLocation" })*@
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-lg-6">
                                                <div class="mb-2">
                                                    <!-- Adjusted margin bottom here -->
                                                    <div class="form-group">
                                                        <label for="exampleInputEmail1" class="form-control-sm">Manager  </label>
                                                        @Html.DropDownListFor(model => model.ManagerId, Model.ManagerSelectListItems, "Select", htmlAttributes: new { @class = "form-control form-control-sm", id = "selectManager", @disabled = "disabled" })

                                                    </div>
                                                </div>
                                            </div>

                                        </div>


                                        <div class="row">
                                            <div class="col-lg-6">
                                                <div class="mb-2">
                                                    <div class="form-group">
                                                        <label for="exampleInputEmail1" class="form-control-sm">Strat Date</label>
                                                        <div class="input-group date" id="StartDate" data-target-input="nearest">
                                                            @Html.EditorFor(model => model.StartDate, new { htmlAttributes = new { @class = "form-control datetimepicker-input form-control-sm", data_target = "#StartDate" } })

                                                            @*<input type="text" name="Date" class="form-control datetimepicker-input" data-target="#reservationdate" />*@
                                                            <div class="input-group-append" data-target="#StartDate" data-toggle="datetimepicker">
                                                                <div class="input-group-text"><i class="fa fa-calendar"></i></div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-lg-6">
                                                <div class="mb-4">
                                                    <div class="form-group">
                                                        <label for="exampleInputEmail1" class="form-control-sm">End Date</label>
                                                        <div class="input-group date" id="DueDate" data-target-input="nearest">
                                                            @Html.EditorFor(model => model.DueDate, new { htmlAttributes = new { @class = "form-control datetimepicker-input form-control-sm", data_target = "#DueDate" } })

                                                            @*<input type="text" name="Date" class="form-control datetimepicker-input" data-target="#reservationdate" />*@
                                                            <div class="input-group-append" data-target="#DueDate" data-toggle="datetimepicker">
                                                                <div class="input-group-text"><i class="fa fa-calendar"></i></div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>

                                        </div>

                                        <div class="row">
                                            <div class="col-lg-6">
                                                <div class="form-group mb-2">
                                                    <label for="exampleInputEmail1" class="form-control-sm">Previews Value</label>
                                                    @Html.EditorFor(model => model.PreViewvalue, new { htmlAttributes = new { @class = "form-control form-control-sm", placeholder = "", @type = "number", @min = "0" } })
                                                </div>
                                            </div>
                                            <div class="col-lg-6 d-flex align-items-center">
                                                <div class="form-group mb-0">
                                                    <div class="custom-control custom-checkbox d-flex align-items-center">
                                                        @Html.CheckBoxFor(model => model.IsActive, new { @class = "form-check-input form-control-sm", id = "exampleCheck2" })
                                                        <label for="exampleCheck2" class="form-control-sm mb-0 ml-2">Is Active.</label>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>





                                    </div>
                                    <div class="card-footer">
                                        <div class="col-12">

                                            <button type="submit" class="btn btn-primary float-right">Submit</button>

                                        </div>

                                    </div>
                                    <!-- /.card-body -->
                                </div>
                                <!-- /.card -->


                            }


                        </div>
                        <!-- /.col (left) -->
                        <div class="col-md-6">
                            <div class="card card-primary">
                                <div class="card-header">
                                    <h3 class="card-title">Locations</h3>
                                </div>
                                <div class="card-body1">

                                    <div class="row">
                                        <div class="modal-body" id="staticBackdropBody">
                                            <!-- Content loaded via AJAX will appear here -->
                                        </div>

                                    </div>
                                    <span id="errorLocation" class="text-danger sm"></span>

                                </div>

                                <!-- /.card-body -->
                            </div>
                            <!-- /.card -->
                            <!-- iCheck -->
                            <div class="card card-success">
                                <div class="card-header">
                                    <h3 class="card-title">Project Assignes</h3>
                                </div>
                                <div class="card-body1">

                                    <div class="row">
                                        <div class="modal-body" id="staticEmployee">
                                            <!-- Content loaded via AJAX will appear here -->
                                        </div>

                                    </div>


                                </div>

                                <!-- /.card-body -->
                                @*<div class="card-footer">
                                        Many more skins available. <a href="https://bantikyan.github.io/icheck-bootstrap/">Documentation</a>
                                    </div>*@
                            </div>
                            <!-- /.card -->

                        </div>
                        <!-- /.col (right) -->
                    </div>



                    <!-- /.card-body -->
                    <!-- /.card -->
                </div>
                <!-- /.col -->
            </div>
            <!-- /.row -->
        </div>
        <!-- /.container-fluid -->
    </section>
</div>


@section scripts {


    <!-- jQuery -->
    <script src="~/plugins/jquery/jquery.min.js"></script>
    <!-- Bootstrap 4 -->
    <script src="~/plugins/bootstrap/js/bootstrap.bundle.min.js"></script>
    <!-- Select2 -->
    <script src="~/plugins/select2/js/select2.full.min.js"></script>
    <!-- Bootstrap4 Duallistbox -->
    <script src="~/plugins/bootstrap4-duallistbox/jquery.bootstrap-duallistbox.min.js"></script>
    <!-- InputMask -->
    <script src="~/plugins/moment/moment.min.js"></script>
    <script src="~/plugins/inputmask/jquery.inputmask.min.js"></script>
    <!-- date-range-picker -->
    <script src="~/plugins/daterangepicker/daterangepicker.js"></script>
    <!-- jquery-validation -->
    <script src="~/plugins/jquery-validation/jquery.validate.min.js"></script>
    <script src="~/plugins/jquery-validation/additional-methods.min.js"></script>
    <!-- bootstrap color picker -->
    <script src="~/plugins/bootstrap-colorpicker/js/bootstrap-colorpicker.min.js"></script>
    <!-- Tempusdominus Bootstrap 4 -->
    <script src="~/plugins/tempusdominus-bootstrap-4/js/tempusdominus-bootstrap-4.min.js"></script>
    <!-- Bootstrap Switch -->
    <script src="~/plugins/bootstrap-switch/js/bootstrap-switch.min.js"></script>
    <!-- BS-Stepper -->
    <script src="~/plugins/bs-stepper/js/bs-stepper.min.js"></script>
    <!-- dropzonejs -->
    <script src="~/plugins/dropzone/min/dropzone.min.js"></script>
    <!-- AdminLTE App -->
    <script src="~/dist/js/adminlte.min.js"></script>
    <!-- AdminLTE for demo purposes -->
    <script src="~/dist/js/demo.js"></script>

    <script>
        $(function () {
            //Initialize Select2 Elements
            $('.select2').select2()

            //Initialize Select2 Elements
            $('.select2bs4').select2({
                theme: 'bootstrap4'
            })

            //Datemask dd/mm/yyyy
            $('#datemask').inputmask('dd/mm/yyyy', { 'placeholder': 'dd/mm/yyyy' })
            //Datemask2 mm/dd/yyyy
            $('#datemask2').inputmask('mm/dd/yyyy', { 'placeholder': 'mm/dd/yyyy' })
            //Money Euro
            $('[data-mask]').inputmask()

            //Date picker
            $('#StartDate').datetimepicker({
                format: 'L',
                maxDate: moment() // Disable future dates
            });

            $('#DueDate').datetimepicker({
                format: 'L',
                maxDate: moment() // Disable future dates
            });

            //Date and time picker
            $('#reservationdatetime').datetimepicker({ icons: { time: 'far fa-clock' } });

            //Date range picker
            $('#reservation').daterangepicker()
            //Date range picker with time picker
            $('#reservationtime').daterangepicker({
                timePicker: true,
                timePickerIncrement: 30,
                locale: {
                    format: 'MM/DD/YYYY hh:mm A'
                }
            })
            //Date range as a button
            $('#daterange-btn').daterangepicker(
                {
                    ranges: {
                        'Today': [moment(), moment()],
                        'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                        'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                        'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                        'This Month': [moment().startOf('month'), moment().endOf('month')],
                        'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
                    },
                    startDate: moment().subtract(29, 'days'),
                    endDate: moment()
                },
                function (start, end) {
                    $('#reportrange span').html(start.format('MMMM D, YYYY') + ' - ' + end.format('MMMM D, YYYY'))
                }
            )

            //Timepicker
            $('#timepicker').datetimepicker({
                format: 'LT'
            })

            //Bootstrap Duallistbox
            $('.duallistbox').bootstrapDualListbox()

            //Colorpicker
            $('.my-colorpicker1').colorpicker()
            //color picker with addon
            $('.my-colorpicker2').colorpicker()

            $('.my-colorpicker2').on('colorpickerChange', function (event) {
                $('.my-colorpicker2 .fa-square').css('color', event.color.toString());
            })

            $("input[data-bootstrap-switch]").each(function () {
                $(this).bootstrapSwitch('state', $(this).prop('checked'));
            })

        })

    </script>

    <script>


        // Function to get the selected value from the dropdown
        function getSelectedValue1() {
            // Get the dropdown element by its ID
            var selectElement = document.getElementById("selectPartner");
            debugger
            // Get the selected value
            var selectedValue = selectElement.value;

            GetPartnerCode(selectedValue)
            // Log or use the selected value
            //console.log("Selected value:", selectedValue);

            // You can return the value if needed
            return selectedValue;
        }

        document.getElementById("selectPartner").addEventListener("change", function () {
            var selectedValue = getSelectedValue1();
            // alert("The selected value is: " + selectedValue);
        });


        var GetPartnerCode = function (id) {

            //$("#loaderbody").removeClass('hide');
            $.ajax({
                type: "GET",
                url: "/JobMaster/GetPartnerCode",
                data: { id: id },

                success: function (result) {

                    document.getElementById("JObPrefixCode").value = result.Value;
                    IsAssignee = true;
                    // take the JobCode value
                    var JobCodevalue = document.getElementById("DefaultJobCode").value;

                    document.getElementById("JobCode").value = result.Value + JobCodevalue;

                    $.ajax({
                        type: "GET",
                        url: "/JobMaster/ViewAssignees",
                        data: { Createby: 'User' },

                        success: function (result) {

                            $("#staticEmployee").html(result);
                        },
                    })

                },
            })
        }


        function getSelectedValue2() {
            // Get the dropdown element by its ID
            var selectElement = document.getElementById("selectManager");
            debugger
            // Get the selected value
            var selectedValue = selectElement.value;

            postmanagerDetails(selectedValue)
            // Log or use the selected value
            //console.log("Selected value:", selectedValue);

            // You can return the value if needed
            return selectedValue;
        }

        document.getElementById("selectManager").addEventListener("change", function () {
            var selectedValue = getSelectedValue2();
            // alert("The selected value is: " + selectedValue);
        });


        var postmanagerDetails = function (id) {

            //$("#loaderbody").removeClass('hide');
            $.ajax({
                type: "GET",
                url: "/JobMaster/GetManagerCode",
                data: { id: id },

                success: function (result) {

                    IsAssignee = true;
                    $.ajax({
                        type: "GET",
                        url: "/JobMaster/ViewAssignees",
                        data: { Createby: 'User' },

                        success: function (result) {

                            $("#staticEmployee").html(result);
                        },
                    })
                },
            })
        }

        window.addEventListener('load', function () {
            IsLocation = true;
            GetDefaultLocaion();
            GetDefaultAssignes();
        });


        var GetDefaultLocaion = function () {

            //$("#loaderbody").removeClass('hide');
             $.ajax({
                type: "GET",
                url: "/JobMaster/ViewCustomerSelectedLocation",
                data: { Createby: 'User' },

                success: function (result) {
                    debugger
                    $("#staticBackdropBody").html(result);

                },
            })
        }

        var GetDefaultAssignes = function () {

            //$("#loaderbody").removeClass('hide');
            $.ajax({
                type: "GET",
                url: "/JobMaster/ViewAssignees",
                data: { Createby: 'User' },

                success: function (result) {
                    debugger
                    $("#staticEmployee").html(result);

                },
            })
        }

        // Function to get the selected value from the dropdown
        function getSelectedValue() {
            // Get the dropdown element by its ID
            var selectElement = document.getElementById("selectUnit");
            debugger
            // Get the selected value
            var selectedValue = selectElement.value;

            GetDefaultLocaion()
            // Log or use the selected value
            //console.log("Selected value:", selectedValue);

            // You can return the value if needed
            return selectedValue;
        }

        // Attach the function to the dropdown change event
        document.getElementById("selectUnit").addEventListener("change", function () {
            var selectedValue = getSelectedValue();
            // alert("The selected value is: " + selectedValue);
        });


        var GetDefaultLocaion = function () {

            //$("#loaderbody").removeClass('hide');
            var selectElement = document.getElementById("selectUnit").value;
            $.ajax({
                type: "GET",
                url: "/JobMaster/ViewCustomerSelectedLocation",
                data: { customerId: selectElement, Createby: 'User' },

                success: function (result) {
                    debugger
                    $("#staticBackdropBody").html(result);

                },
            })
        }

        function handleDateChange1() {
            // Your logic here
            debugger
            var ToDate = document.getElementById("ToDate").value;
            var fromDate = document.getElementById("FromDate").value;
            var selectElement = document.getElementById("selectlocation").value;

            if (ToDate != "") {

                document.getElementById("ToDate").className = "form-control text-box single-line";


            }

            if (fromDate != "") {
                document.getElementById("FromDate").className = "form-control text-box single-line";


            }

            if (selectElement != "") {
                document.getElementById("selectlocation").className = "form-control text-box single-line";

            }


        }


        var IsValidLocation = true;

        var AddLocation = function () {
            var selectElement = document.getElementById("selectlocation").value;
            var selectCustomerElement = document.getElementById("selectUnit").value;
            var FromDate = document.getElementById("FromDate").value;
            var ToDate = document.getElementById("ToDate").value;

            if (selectElement == "") {
                IsValidLocation = false;

                document.getElementById("selectlocation").className = "form-control form-control-sm is-invalid";
                return false;
            }
            if (FromDate == "") {
                IsValidLocation = false;

                document.getElementById("FromDate").className = "form-control form-control-sm is-invalid";
                return false;
            }
            if (ToDate == "") {
                IsValidLocation = false;

                document.getElementById("ToDate").className = "form-control form-control-sm is-invalid";
                return false;
            }

            if (selectCustomerElement == "") {
                IsValidLocation = false;

                document.getElementById("selectUnit").className = "form-control form-control-sm is-invalid";
                return false;
            }


            $.ajax({
                type: "Post",
                url: "/JobMaster/InsertSelectedLocation",
                data: { locationId: selectElement, customerId: selectCustomerElement, fromDate: FromDate, toDate: ToDate },

                success: function (result) {
                    Swal.fire({

                        icon: result.Status,
                        title: result.Status,
                        text: result.Text
                    }).then((result) => {
                        IsLocation = true;
                        $('#errorLocation').html("");
                        if (result.isConfirmed) {

                            var selectElement = document.getElementById("selectUnit").value;
                            $.ajax({
                                type: "GET",
                                url: "/JobMaster/ViewCustomerSelectedLocation",
                                data: { customerId: selectElement, Createby: 'User' },

                                success: function (result) {
                                    debugger
                                    $("#staticBackdropBody").html(result);

                                },
                            })
                        }
                        else {
                            var selectElement = document.getElementById("selectUnit").value;
                            $.ajax({
                                type: "GET",
                                url: "/JobMaster/ViewCustomerSelectedLocation",
                                data: { customerId: selectElement, Createby: 'User' },

                                success: function (result) {
                                    debugger
                                    $("#staticBackdropBody").html(result);

                                },
                            })
                        }
                    })
                },
            })
        }


         var PostInsert = function (model) {

             $.ajax({
                 type: "Post",
                 url: "/JobMaster/Create",
                 data: model,

                 success: function (result) {
                     Swal.fire({

                         icon: result.Status,
                         title: result.Status,
                         text: result.Text
                     }).then((result) => {
                         if (result.isConfirmed) {
                             window.location.href = "@Url.Action("Index", "JobMaster")"
                         }
                         else {
                             window.location.href = "@Url.Action("Index", "JobMaster")"
                         }
                     })
                 },
             })

         }

        var IsLocation = false;
        var IsAssignee = false;

        $(function () {

            $.validator.setDefaults({
                submitHandler: function () {

                    var data = $('#quickForm').serialize();

                    var List = JSON.parse(localStorage.getItem('ViewAssignee')) || [];


                    if (IsAssignee === true) {
                        let hasWarning = false;

                        List.forEach(item => {
                            if (item.BudgetedHours === null || item.BudgetedHours === 0) {
                                Swal.fire({
                                    title: 'Warning!',
                                    text: 'BudgetedHours is not defined.',
                                    icon: 'warning',
                                    confirmButtonText: 'OK'
                                });
                                hasWarning = true; // Set flag to true
                            }
                        });

                        if (hasWarning) {
                            return; // Exit function or prevent further execution
                        }

                        // Continue with the rest of the logic
                        const hasEmployeesRecord = List.some(record => record.TypeOftable === 'Employees');

                        if (hasEmployeesRecord === false) {
                            Swal.fire({
                                title: 'Warning!',
                                text: 'Please assign the employee.',
                                icon: 'warning',
                                confirmButtonText: 'OK'
                            });
                            hasWarning = true;
                        }

                        if (hasWarning) {
                            return; // Exit function or prevent further execution
                        }
                    }

                    if (IsLocation === false) {
                        $('#errorLocation').html("Please add the Location");
                    } else {
                        $('#errorLocation').html("");
                        PostInsert(data);
                    }

                }
            });



            $(document).ready(function () {

                var validator = $('#quickForm').validate({
                    rules: {
                        PreViewvalue: {
                            required: true,

                        },

                        Narration: {
                            required: true,
                        },
                        StartDate: {
                            required: true,
                            date: true
                        },
                        DueDate: {
                            required: true,
                            date: true
                        },
                        Fk_CustomerId: {
                            required: true,
                        },
                        ManagerId: {
                            required: true,
                        },
                        PartnerId: {
                            required: true,
                        },
                        IsActive: {
                            required: true
                        },

                    },
                    messages: {

                        PreViewvalue: {
                            required: "Please provide a Previews Value",
                        },
                        Narration: {
                            required: "Please provide a Narration",
                        },
                        Fk_CustomerId: {
                            required: "Please provide a Customer",
                        },
                        ManagerId: {
                            required: "Please provide a Manager",
                        },
                        PartnerId: {
                            required: "Please provide a Manager",
                        },
                        StartDate: {
                            required: "Please provide a Start Date",
                        },
                        DueDate: {
                            required: "Please provide a Due Date",
                        },
                        IsActive: "Please Select the Status",

                    },
                    errorElement: 'span',
                    errorPlacement: function (error, element) {
                        error.addClass('invalid-feedback');
                        element.closest('.form-group').append(error);
                    },
                    highlight: function (element, errorClass, validClass) {
                        $(element).addClass('is-invalid');
                    },
                    unhighlight: function (element, errorClass, validClass) {
                        $(element).removeClass('is-invalid');
                    },
                });

            });

        });



        /// Second step


         var PostInsert = function (model) {

             $.ajax({
                 type: "Post",
                 url: "/JobMaster/Edit",
                 data: model,

                 success: function (result) {
                     Swal.fire({

                         icon: result.Status,
                         title: result.Status,
                         text: result.Text
                     }).then((result) => {
                         if (result.isConfirmed) {
                             window.location.href = "@Url.Action("Index", "JobMaster")"
                         }
                         else {
                             window.location.href = "@Url.Action("Index", "JobMaster")"
                         }
                     })
                 },
             })

        }



    </script>
}
